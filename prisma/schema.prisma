// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String   @id @default(uuid())
  email           String   @unique
  username        String   @unique
  password        String
  name            String?
  role            UserRole @default(USER)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  refreshTokens RefreshToken[]
  carts         Cart[]
  orders        Order[]

  @@map("users")
}

enum UserRole {
  USER
  ADMIN
}

model RefreshToken {
  id        String   @id @default(uuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  isRevoked Boolean  @default(false)
  createdAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("refresh_tokens")
}

model Category {
  id          String   @id @default(uuid())
  name        String   @unique
  description String?
  slug        String?  @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  products Product[]

  @@map("categories")
}

model Product {
  id          String   @id @default(uuid())
  name        String
  description String?
  slug        String?  @unique
  price       Float
  stock       Int      @default(0)
  imageUrls   String[] @default([])
  categoryId  String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  category  Category   @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  cartItems CartItem[]
  orderItems OrderItem[]

  @@map("products")
}

model Cart {
  id        String   @id @default(uuid())
  userId    String?  // Nullable for guest carts
  guestToken String? @unique // For guest carts
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user      User?      @relation(fields: [userId], references: [id], onDelete: Cascade)
  cartItems CartItem[]

  @@map("carts")
}

model CartItem {
  id        String   @id @default(uuid())
  cartId    String
  productId String
  quantity  Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  cart    Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([cartId, productId])
  @@map("cart_items")
}

model Order {
  id           String      @id @default(uuid())
  userId       String
  status       OrderStatus @default(PENDING)
  totalAmount  Float
  shippingAddress String
  phoneNumber  String
  notes        String?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  // Relations
  user       User        @relation(fields: [userId], references: [id])
  orderItems OrderItem[]

  @@map("orders")
}

model OrderItem {
  id        String   @id @default(uuid())
  orderId   String
  productId String
  quantity  Int
  price     Float    // Store price at time of order
  createdAt DateTime @default(now())

  // Relations
  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])

  @@map("order_items")
}

enum OrderStatus {
  PENDING
  APPROVED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

